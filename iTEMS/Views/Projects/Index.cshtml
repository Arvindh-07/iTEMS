@model IEnumerable<iTEMS.Models.Project>


@{
    ViewData["Title"] = "Projects List";
}

<br />
<br />
<br />
<br />
<br />
<br />
<title>FullCalendar Draggable Events</title>
<style>
    html, body {
        margin: 0;
        padding: 0;
        font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
        font-size: 14px;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #main-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        max-width: 1200px;
        width: 100%;
    }

/*     #external-events {
        width: 150px;
        padding: 10px;
        border: 1px solid #ccc;
        background: #eee;
        margin-right: 20px;
    } */

        #external-events .fc-event {
            cursor: move;
            margin: 3px 0;
            padding: 2px;
            background: #3a87ad;
            color: #fff;
        }

    #calendar-container {
        flex-grow: 1;
    }

    #calendar {
        max-width: 900px;
        margin: 0 auto;
    }
</style>
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.13/index.global.min.css' rel='stylesheet' />
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.13/index.global.min.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var Calendar = FullCalendar.Calendar;
        var Draggable = FullCalendar.Draggable;
        // Get current date and time
        var now = new Date().toISOString();
        var containerEl = document.getElementById('external-events');
        var calendarEl = document.getElementById('calendar');
        var checkbox = document.getElementById('drop-remove');

        // initialize the external events
        new Draggable(containerEl, {
            itemSelector: '.external-event',
            eventData: function (eventEl) {
                return {
                    title: eventEl.innerText,
                    backgroundColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                    borderColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                    textColor: window.getComputedStyle(eventEl, null).getPropertyValue('color'),
                };
            }
        });

        // initialize the calendar
        var calendar = new Calendar(calendarEl, {
            initialView: 'timeGridWeek',
            nowIndicator: true, // Show the now indicator
            timeZone: 'Asia/Kuala_Lumpur',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'timeGridWeek,timeGridDay,dayGridMonth'
            },
            editable: true,
            droppable: true, // this allows things to be dropped onto the calendar
            dateClick: function (info) {
                // Open modal to create new event
                $('#new-event-start').val(info.dateStr);
                $('#createEventModal').modal('show');

                $('#create-event').off('click').on('click', function () {
                    var title = $('#new-event-title').val();
                    var duration = parseInt($('#new-event-duration').val());
                    if (title && !isNaN(duration) && duration > 0) {
                        var startDate = new Date(info.date);
                        var endDate = new Date(startDate.getTime() + duration * 60000); // add duration in minutes
                        calendar.addEvent({
                            title: title,
                            start: startDate,
                            end: endDate,
                            allDay: info.allDay
                        });
                        $('#createEventModal').modal('hide');
                        $('#new-event-title').val('');
                        $('#new-event-duration').val('30'); // reset duration to default
                    }
                });
            },
            drop: function (info) {
                if (checkbox.checked) {
                    // Remove the dragged element from the list of external events
                    info.draggedEl.parentNode.removeChild(info.draggedEl);
                }

                // Prevent default behavior which may cause duplication
                info.jsEvent.preventDefault();
            },
            eventClick: function (info) {
                // Show event details in the modal
                $('#event-title').val(info.event.title);
                $('#eventModal').modal('show');

                // Handle save button click
                $('#save-event').off('click').on('click', function () {
                    var newTitle = $('#event-title').val();
                    if (newTitle) {
                        info.event.setProp('title', newTitle);
                    }
                    $('#eventModal').modal('hide');
                });

                // Handle delete button click
                $('#delete-event').off('click').on('click', function () {
                    info.event.remove();
                    $('#eventModal').modal('hide');
                });
            },
            eventDrop: function (info) {
                // Update event start and end time in the modal after drag and drop
                $('#event-title').val(info.event.title);
                $('#eventModal').modal('show');
            }
        });

        calendar.render();

        /* ADDING EVENTS */
        var currColor = '#3c8dbc'; // Red by default
        // Color chooser button
        $('#color-chooser > li > a').click(function (e) {
            e.preventDefault();
            // Save color
            currColor = $(this).css('color');
            // Add color effect to button
            $('#add-new-event').css({
                'background-color': currColor,
                'border-color': currColor
            });
        });

        $('#add-new-event').click(function (e) {
            e.preventDefault();
            // Get value and make sure it is not null
            var val = $('#new-event').val();
            if (val.length === 0) {
                return;
            }

            // Create new event
            var event = $('<div />');
            event.css({
                'background-color': currColor,
                'border-color': currColor,
                'color': '#fff'
            }).addClass('external-event');
            event.text(val);
            $('#external-events').prepend(event);

            // Add draggable functionality to new event
            new Draggable(containerEl, {
                itemSelector: '.external-event',
                eventData: function (eventEl) {
                    return {
                        title: eventEl.innerText,
                        backgroundColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                        borderColor: window.getComputedStyle(eventEl, null).getPropertyValue('background-color'),
                        textColor: window.getComputedStyle(eventEl, null).getPropertyValue('color')
                    };
                }
            });

            // Remove event from text input
            $('#new-event').val('');
        });
    });
</script>


<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-3">
                <div class="sticky-top mb-3">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Draggable Events</h4>
                        </div>
                        <div class="card-body">

                            <div id="external-events">
                                <div class="external-event bg-success">Drag and Drop. Click to Edit</div>
                                <div class="external-event bg-warning">Drag and Drop. Click to Edit</div>
                                <div class="external-event bg-info">Drag and Drop. Click to Edit</div>
                                <div class="external-event bg-primary">Drag and Drop. Click to Edit</div>
                                <div class="external-event bg-danger">Drag and Drop. Click to Edit</div>
                                <div class="checkbox">
                                    <label for="drop-remove" style="display:none">
                                        <input type="checkbox" id="drop-remove" style="display:none">
                                        remove after drop
                                    </label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="col-md-9">
                <div class="card card-primary">
                    <div class="card-body p-0">
                        <div id="calendar"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal for viewing and editing events -->
<div class="modal fade" id="eventModal" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="eventForm">
                    <div class="form-group">
                        <label for="event-title">Event Title</label>
                        <input type="text" class="form-control" id="event-title">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="delete-event">Delete Event</button>
                <button type="button" class="btn btn-primary" id="save-event">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for creating new events -->
<div class="modal fade" id="createEventModal" tabindex="-1" role="dialog" aria-labelledby="createEventModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createEventModalLabel">Create New Event</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createEventForm">
                    <div class="form-group">
                        <label for="new-event-title">Event Title</label>
                        <input type="text" class="form-control" id="new-event-title">
                    </div>
                    <div class="form-group">
                        <label for="new-event-duration" style="display:none">Duration (minutes)</label>
                        <input type="number" class="form-control" id="new-event-duration" value="30" style="display:none">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="create-event">Create Event</button>
            </div>
        </div>
    </div>
</div>



<div class="card-body" style="display:none">
    <p>
        <a class="btn btn-primary" asp-action="Create">Create New Project</a>
    </p>
    <table @* id="example1" *@ class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>
                        Project Title
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PIC)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Budget)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Update)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Blocker)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedBy)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedOn)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ModifiedBy)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ModifiedOn)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
        @foreach (var item in Model) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StartDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EndDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PIC)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Budget)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Update)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Blocker)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedBy)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedOn)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedBy)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedOn)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
        }
            </tbody>
        </table>
</div>




<br />
<br />
<br />

<div class="card-header">
    <h3 style="font-family:Tahoma">Projects</h3>
</div>

<div class="card-body">
    <p>
        <a class="btn btn-primary" asp-action="Create">Create New Project</a>
    </p>
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-4">
                <div class="card mb-4 shadow-sm">
                    <div class="card-header">
                        <h4 class="my-0 font-weight-normal" style="font-family:Tahoma">@Html.DisplayFor(modelItem => item.Name)</h4>
                    </div>
                    <div class="card-body">
                        <div class="ribbon-wrapper ribbon-lg">
                            @if (item.Status == ProjectStatus.Planning)
                            {
                                <div class="ribbon bg-info">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </div>
                            }
                            else if (item.Status == ProjectStatus.Completed)
                            {
                                <div class="ribbon bg-success">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </div>
                            }
                            else if (item.Status == ProjectStatus.Pending)
                            {
                                <div class="ribbon" style="background-color: #4b0082; color: white;">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </div>
                            }
                            else if (item.Status == ProjectStatus.Blocked)
                            {
                                <div class="ribbon bg-danger">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </div>
                            }
                            else if (item.Status == ProjectStatus.Delayed)
                            {
                                <div class="ribbon bg-warning">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </div>
                            }
                            
                        </div>
                        <p class="card-text">                            
                            <strong>Client Name:</strong> @Html.DisplayFor(modelItem => item.ClientName) <br />
                            <strong>Person in Charge:</strong> @Html.DisplayFor(modelItem => item.PIC) <br />
                        </p>
                    </div>

                    <div class="card-footer d-flex justify-content-end">
                        <div class="btn-group" style="align-items:center">
                            <a class="btn btn-primary btn-sm" asp-action="Details" asp-route-id="@item.Id" title="View Project Feed">
                                <i class="fas fa-folder"></i>&nbsp;&nbsp;&nbsp;View Project Feed
                            </a>
                            <a class="btn btn-info btn-sm" asp-action="Edit" asp-route-id="@item.Id" title="Update Project Details">
                                <i class="fas fa-pencil-alt"></i>
                            </a>
                            <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.Id" title="Delete Project">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

